// Generated by CoffeeScript 1.5.0
var GlusterFS, Validator, colors, exec, x2j,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

x2j = require('xml2js').parseString;

exec = require('child_process').exec;

colors = require('colors');

Validator = require('validator').Validator;

GlusterFS = (function() {

  function GlusterFS(params) {
    this.params = params != null ? params : {};
    this.peer = __bind(this.peer, this);
    this.volume = __bind(this.volume, this);
    this.formatOptions = __bind(this.formatOptions, this);
    this.__run = __bind(this.__run, this);
    this.volumeCommands = ['info', 'create', 'delete', 'start', 'stop', 'rename', 'add-brick', 'remove-brick', 'rebalance', 'replace-brick', 'set', 'set-transport', 'log filename', 'log locate', 'log rotate'];
    this.peerCommands = ['probe', 'detach', 'status'];
  }

  GlusterFS.prototype.__run = function(str, cb) {
    console.log(("Running Command: gluster " + str).green);
    return exec("gluster " + str, function(err, stdout, stderr) {
      if (err) {
        return cb({
          error: true,
          reason: err
        });
      }
      return x2j(stdout, function(err, jsonData) {
        var res;
        if (err) {
          return cb({
            error: true,
            reason: err
          });
        }
        res = {
          error: false
        };
        res.data = jsonData.cliOutput;
        return cb(res);
      });
    });
  };

  GlusterFS.prototype.formatOptions = function(opts) {
    if (typeof opts === 'string') return opts;

    var option, str, value;
    str = (function() {
      var _results;
      _results = [];
      for (option in opts) {
        value = opts[option];
        _results.push("" + option + " " + value);
      }
      return _results;
    })();
    return str.join(' ');
  };

  GlusterFS.prototype.volume = function(command, volname, cb, options) {
    var _ref;
    if (options == null) {
      options = {};
    }
    if (command == null) {
      return cb({
        error: true,
        reason: 'No command given'
      });
    }
    if (_ref = !command, __indexOf.call(this.volumeCommands, _ref) >= 0) {
      return cb({
        error: true,
        reason: 'Command not found'
      });
    }
    if ((volname == null) && command !== 'info') {
      return cb({
        error: true,
        reason: 'This command requires a volume name'
      });
    }
    if (command === 'info') {
      if (volname == null) {
        volname = 'all';
      }
    }
    return this.__run(("volume " + command + " " + volname + " ") + this.formatOptions(options) + " --xml", cb);
  };

  GlusterFS.prototype.peer = function(command, hostname, cb) {
    var cmd, _ref;
    if (command == null) {
      return cb({
        error: true,
        reason: 'Command not entered'
      });
    }
    if (_ref = !command, __indexOf.call(this.peerCommands, _ref) >= 0) {
      return cb({
        error: true,
        reason: 'Command not found'
      });
    }
    if ((hostname == null) && command !== 'status') {
      return cb({
        error: true,
        reason: 'This command requires a hostname'
      });
    }
    cmd = "peer " + command;
    if (hostname != null) {
      cmd += " " + hostname;
    }
    return this.__run(cmd + " --xml", cb);
  };

  module.exports = GlusterFS;

})();
